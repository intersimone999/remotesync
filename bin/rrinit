#!/usr/bin/ruby

require_relative "../lib/commons"

args = CmdParser.setup(INIT_COMMAND, :hostname, :path) do |opts|
    CmdParser.autoset_param "-pPORT",   "--port=PORT",    "Port of the remote host",                                :port,       [:propagate, :delete, :unlock, :status]
    CmdParser.autoset_param "-uUSER",   "--user=USER",    "User of the remote host",                                :user,       [:propagate, :delete, :unlock, :status]
    CmdParser.autoset_param "-nNETNS",  "--netns=NETNS",  "Network namespace",                                      :netns,      [:propagate, :delete, :unlock, :status]
    CmdParser.autoset_param "-oOWNER",  "--owner=OWNER",  "Ownership of the files (defaults to the current user)",  :owner,      [:propagate, :delete, :unlock, :status]
    
    CmdParser.autoset_flag  "-r",       "--recursive",    "Ownership of the files (defaults to the current user)",  :recursive,  [:propagate]
    CmdParser.autoset_flag  "-f",       "--force",        "Force the overwrite of existing data",                   :force
    CmdParser.autoset_flag  "-R",       "--pull-only",    "Allows only the pull from the remote",                   :pullonly,   [:pushonly]
    CmdParser.autoset_flag  "-W",       "--push-only",    "Allows only the push to the remote",                     :pushonly,   [:pullonly]    
    
    CmdParser.autoset_flag  "-D",       "--delete",       "Delete all the sync files (asks for confirmation)",      :delete,     [:propagate, :unlock, :status]
    CmdParser.autoset_flag  "-p",       "--propagate",    "Propagate the root file to all the sub-directories",     :propagate,  [:delete, :unlock, :status]
    CmdParser.autoset_flag  "-u",       "--unlock",       "Unlock all the remote information files",                :unlock,     [:delete, :propagate, :status]
    CmdParser.autoset_flag  "-s",       "--status",       "Prints the status of the folder",                        :status,     [:delete, :propagate, :unlock]
end

if CmdParser.opt :delete
    unless FileTest.exists? RemoteInfo.filename(".")
        puts "This folder is not initialized yet. " + "Deletion aborted.".red
        exit
    end
    
    sub = CmdParser.opt(:recursive) ? " and its subdirectories" : ""
    print "Are you sure you want to delete all the sync information in this directory#{sub}? [y/N] "
    confirm = gets.chomp.downcase
    if confirm != "y"
        puts "Aborted.".red
        exit
    end
    
    print "Deleting all the remote files... "
    puts "" if CmdParser.opt :verbose
    FS.each_folder(".", CmdParser.opt(:recursive)) do |current|
        vputs "Deleting remote information file for #{current}"
        OS.remove_file RemoteInfo.filename(current)
    end
    
    puts "Done!".green
    exit
    
elsif CmdParser.opt :propagate
    print "Propagating the remote information to all the subfolders... "
    unless FileTest.exists? RemoteInfo.filename(".")
        puts "\n" + "Error".red + ": Initialize this directory first. Aborting propagation."
        exit
    end
    
    rfile = RemoteInfo.load
    
    CmdParser.set :port, rfile.port
    CmdParser.set :user, rfile.user
    CmdParser.set :netns, rfile.netns
    CmdParser.set :owner, rfile.owner
    CmdParser.set :recursive, true
    args[:hostname] = rfile.host
    args[:path] = rfile.path
    
    vputs "\nPropagation information:"
    vputs "\tHost: #{rfile.host}"
    vputs "\tPath: #{rfile.path}"
    vputs "\tPort: #{rfile.port}" if rfile.port
    vputs "\tUser: #{rfile.user}" if rfile.user
    vputs "\tNetwork namespace: #{rfile.netns}" if rfile.netns
    vputs "\tOwner: #{rfile.owner}" if rfile.owner
    #Does propagation through the normal procedure
    
elsif CmdParser.opt :unlock
        print "Unlocking all the remote files... "
        RemoteInfo.unlock_all current
        puts "Done!".green
        exit

elsif CmdParser.opt :status
    unless FileTest.exists? RemoteInfo.filename(".")
        puts "This folder is not initialized yet."
        exit
    end
    
    rinfo = RemoteInfo.load "."
    userstring = rinfo.user ? rinfo.user.to_s + "@" : ""
    portstring = rinfo.port ? ":"+rinfo.port.to_s : ""
    
    mode = []
    if rinfo.can_push?
        mode.push "Push".green
    else
        mode.push "Push".red
    end
    
    if rinfo.can_pull?
        mode.push "Pull".green
    else
        mode.push "Pull".red
    end
    modestring = mode.join("|")
    
    puts "Root remote information:"
    puts "\tHost: #{userstring}#{rinfo.host}#{portstring}"
    puts "\tPath: #{rinfo.path}"
    puts "\tNetwork namespace: #{rinfo.netns}" if rinfo.netns
    puts "\tOwner: #{rinfo.owner}" if rinfo.owner
    puts "\tMode: #{modestring}"
    
    puts "Local folders:"
    ignore = []
    FS.each_folder(".", true) do |current|
        next if current == "."
        
        skip = false
        ignore.each do |ig|
            skip = true if current.start_with? ig
        end
        next if skip
        
        valid = File.join(rinfo.path, current)
        
        status = ""
        if FileTest.exists? RemoteInfo.filename(current)
            cinfo = RemoteInfo.load current
            
            if cinfo.path != valid || cinfo.host != rinfo.host
                status = "DIFFERENT REMOTE".yellow  + "(" + ScpUtils.remote(nil, cinfo) + ")"
                ignore.push current
            else
                status = "OK".green
            end
        else
            status = "LOCAL ONLY".red
            ignore.push current
        end
        puts "\t- #{current}: #{status}"
    end
    exit
    
end


err = false
unless args[:hostname]
    puts "Error".red + ": You have to specify the remote hostname."
    err = true
end

unless args[:path]
    puts "Error".red + ": You have to specify the remote path."
    err = true
end

if err
    puts "Try #{INIT_COMMAND} -h to check how to use this command"
    exit
end

unless CmdParser.opt :propagate
    sub = CmdParser.opt(:recursive) ? " and its subdirectories" : ""
    print "Initializing the directory#{sub}... "
end

FS.each_folder(".", CmdParser.opt(:recursive)) do |current|
    if CmdParser.opt(:force) || !FileTest.exists?(RemoteInfo.filename(current))
        rfile = RemoteInfo.new
        rfile.port = CmdParser.opt :port
        rfile.user = CmdParser.opt :user
        rfile.netns = CmdParser.opt :netns
        rfile.owner = CmdParser.opt :owner
        rfile.operations = "w" if CmdParser.opt :pushonly
        rfile.operations = "r" if CmdParser.opt :pullonly

        rfile.host = args[:hostname]
        rfile.path = (current != "." ? File.join(args[:path], current) : args[:path])
        
        vputs "Writing remote information for #{current}..."
        rfile.save_info current
    else
        vputs "Skipping #{current} (already exists)..."
    end
end

puts "Done!".green
